---
description: 
globs: 
alwaysApply: false
---
---
description: Git 提交规范和分支管理指导原则
globs: "**/*"
alwaysApply: true
---
# Git 规则

本规则定义了项目的 Git 工作流程、提交规范和分支管理策略。

## 重要原则

1. **安全第一**：不要自动提交 git 代码，除非有明确的提示
2. **质量保证**：提交前确保代码通过所有测试
3. **清晰描述**：保持提交信息简洁明了，描述清楚变更内容
4. **小步提交**：避免大型提交，尽量将变更分解为小的、相关的提交

## 提交规范

### 提交信息格式
使用约定式提交规范：`<type>(<scope>): <subject>`

**格式要求**：
- 注意冒号 `:` 后有空格
- 使用英文标点符号
- 主题行不超过30个字符

### Type 类型枚举

| Type      | 说明                           |
| --------- | ------------------------------ |
| feat      | 新增功能                       |
| fix       | 修复 bug                       |
| docs      | 文档注释                       |
| style     | 代码格式(不影响代码运行的变动) |
| refactor  | 重构、优化(既不增加新功能，也不是修复bug) |
| perf      | 性能优化                       |
| test      | 增加测试                       |
| chore     | 构建过程或辅助工具的变动       |
| revert    | 回退                           |
| build     | 打包                           |

### 多要点提交示例

当 subject 中描述超过两种要点时，使用要点列表描述详情：

```
feat(web): implement email verification workflow

- Add email verification token generation service
- Create verification email template with dynamic links
- Add API endpoint for token validation
- Update user model with verification status field
```

## 分支管理策略

### 主要分支类型

| 分支类型 | 说明                     | 稳定性 |
| -------- | ------------------------ | ------ |
| main/master | 主分支，保持稳定可发布状态 | 高     |
| develop  | 开发分支，包含最新开发特性 | 中     |
| feature/* | 功能分支，用于开发新功能   | 低     |
| bugfix/*  | 修复分支，用于修复bug      | 中     |
| release/* | 发布分支，用于准备发布     | 中     |
| hotfix/*  | 热修复分支，用于紧急修复   | 高     |

### 分支命名约定

| 分支类型   | 命名格式             | 示例                      |
| ---------- | -------------------- | ------------------------- |
| 功能分支   | feature/[描述]       | feature/user-auth         |
| 修复分支   | fix/[问题ID]-[描述]  | fix/issue-42-login-crash  |
| 发布分支   | release/[版本]       | release/v2.1.0            |
| 热修复分支 | hotfix/[版本]-[描述] | hotfix/v2.0.1-payment-fix |

## 工作流程指导

1. **功能开发**：从 develop 分支创建 feature 分支
2. **Bug 修复**：根据紧急程度选择从 develop 或 main 分支创建修复分支
3. **发布准备**：从 develop 分支创建 release 分支
4. **紧急修复**：从 main 分支创建 hotfix 分支